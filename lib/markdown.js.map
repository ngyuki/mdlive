{"version":3,"sources":["../src/markdown.js"],"names":["renderer","Object","assign","marked","Renderer","image","href","title","text","filename","decodeURIComponent","test","data","fs","readFileSync","toString","err","prototype","call","parseString","input","embedded","highlight","code","lang","hljs","highlightAuto","value","readMarkdownFile","Promise","resolve","readFile","html"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,SAASA,QAAT,GAAoB;AAChB,SAAOC,MAAM,CAACC,MAAP,CAAc,IAAIC,gBAAOC,QAAX,EAAd,EAAqC;AACxCC,IAAAA,KAAK,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAd,EAAoB;AACrB,YAAMC,QAAQ,GAAGC,kBAAkB,CAACJ,IAAD,CAAnC;;AACA,UAAI,CAAC,eAAeK,IAAf,CAAoBF,QAApB,CAAL,EAAoC;AAChC,YAAI;AACA,gBAAMG,IAAI,GAAGC,YAAGC,YAAH,CAAgBL,QAAhB,EAA0BM,QAA1B,CAAmC,QAAnC,CAAb;;AACA,iBAAQ,aAAYP,IAAK,gCAA+BI,IAAK,IAA7D;AACH,SAHD,CAGE,OAAOI,GAAP,EAAY,CACV;AACH;AACJ;;AACD,aAAOb,gBAAOC,QAAP,CAAgBa,SAAhB,CAA0BZ,KAA1B,CAAgCa,IAAhC,CAAqC,IAArC,EAA2CZ,IAA3C,EAAiDC,KAAjD,EAAwDC,IAAxD,CAAP;AACH;;AAZuC,GAArC,CAAP;AAcH;;AAED,SAASW,WAAT,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsC;AAClC,SAAO,qBAAOD,KAAP,EAAc;AACjBpB,IAAAA,QAAQ,EAAEqB,QAAQ,GAAGrB,QAAQ,EAAX,GAAgB,IADjB;AAEjBsB,IAAAA,SAAS,EAAE,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACvB,aAAOC,mBAAKC,aAAL,CAAmBH,IAAnB,EAAyB,CAACC,IAAD,CAAzB,EAAiCG,KAAxC;AACH;AAJgB,GAAd,CAAP;AAMH;;AAAA;;AAEM,SAASC,gBAAT,CAA0BnB,QAA1B,EAAoCY,QAApC,EAA8C;AACjD,SAAO,IAAIQ,OAAJ,CAAaC,OAAD,IAAa;AAC5BjB,gBAAGkB,QAAH,CAAYtB,QAAZ,EAAsB,CAACO,GAAD,EAAMJ,IAAN,KAAe;AACjC,UAAII,GAAJ,EAAS;AACL,cAAMA,GAAN;AACH;;AACD,YAAMgB,IAAI,GAAGb,WAAW,CAACP,IAAI,CAACG,QAAL,EAAD,EAAkBM,QAAlB,CAAxB;AACAS,MAAAA,OAAO,CAACE,IAAD,CAAP;AACH,KAND;AAOH,GARM,CAAP;AASH","sourcesContent":["import fs from 'fs';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\nfunction renderer() {\n    return Object.assign(new marked.Renderer(), {\n        image(href, title, text) {\n            const filename = decodeURIComponent(href);\n            if (!/^[a-z]+:\\/\\//.test(filename)) {\n                try {\n                    const data = fs.readFileSync(filename).toString('base64');\n                    return `<img alt=\"${text}\" src=\"data:image/png;base64,${data}\">`;\n                } catch (err) {\n                    // noop\n                }\n            }\n            return marked.Renderer.prototype.image.call(this, href, title, text);\n        }\n    });\n}\n\nfunction parseString(input, embedded) {\n    return marked(input, {\n        renderer: embedded ? renderer() : null,\n        highlight: (code, lang) => {\n            return hljs.highlightAuto(code, [lang]).value;\n        },\n    });\n};\n\nexport function readMarkdownFile(filename, embedded) {\n    return new Promise((resolve) => {\n        fs.readFile(filename, (err, data) => {\n            if (err) {\n                throw err;\n            }\n            const html = parseString(data.toString(), embedded);\n            resolve(html);\n        });\n    });\n}\n"],"file":"markdown.js"}