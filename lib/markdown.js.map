{"version":3,"sources":["../src/markdown.js"],"names":["Renderer","marked","image","href","title","text","filename","decodeURIComponent","test","data","fs","readFileSync","toString","err","parseString","input","embedded","renderer","highlight","code","lang","hljs","highlightAuto","value","readMarkdownFile","Promise","resolve","readFile","html"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,QAAN,SAAuBC,gBAAOD,QAA9B,CAAuC;AAEnCE,EAAAA,KAAK,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAd,EAAoB;AACrB,UAAMC,QAAQ,GAAGC,kBAAkB,CAACJ,IAAD,CAAnC;;AACA,QAAI,CAAC,eAAeK,IAAf,CAAoBF,QAApB,CAAL,EAAoC;AAChC,UAAI;AACA,cAAMG,IAAI,GAAGC,YAAGC,YAAH,CAAgBL,QAAhB,EAA0BM,QAA1B,CAAmC,QAAnC,CAAb;;AACA,eAAQ,aAAYP,IAAK,gCAA+BI,IAAK,IAA7D;AACH,OAHD,CAGE,OAAOI,GAAP,EAAY,CACV;AACH;AACJ;;AACD,WAAO,MAAMX,KAAN,CAAYC,IAAZ,EAAkBC,KAAlB,EAAyBC,IAAzB,CAAP;AACH;;AAbkC;;AAgBvC,SAASS,WAAT,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsC;AAClC,SAAO,qBAAOD,KAAP,EAAc;AACjBE,IAAAA,QAAQ,EAAED,QAAQ,GAAG,IAAIhB,QAAJ,EAAH,GAAoB,IADrB;AAEjBkB,IAAAA,SAAS,EAAE,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACvB,aAAOC,mBAAKC,aAAL,CAAmBH,IAAnB,EAAyB,CAACC,IAAD,CAAzB,EAAiCG,KAAxC;AACH;AAJgB,GAAd,CAAP;AAMH;;AAAA;;AAEM,SAASC,gBAAT,CAA0BlB,QAA1B,EAAoCU,QAApC,EAA8C;AACjD,SAAO,IAAIS,OAAJ,CAAaC,OAAD,IAAa;AAC5BhB,gBAAGiB,QAAH,CAAYrB,QAAZ,EAAsB,CAACO,GAAD,EAAMJ,IAAN,KAAe;AACjC,UAAII,GAAJ,EAAS;AACL,cAAMA,GAAN;AACH;;AACD,YAAMe,IAAI,GAAGd,WAAW,CAACL,IAAI,CAACG,QAAL,EAAD,EAAkBI,QAAlB,CAAxB;AACAU,MAAAA,OAAO,CAACE,IAAD,CAAP;AACH,KAND;AAOH,GARM,CAAP;AASH","sourcesContent":["import fs from 'fs';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\nclass Renderer extends marked.Renderer {\n\n    image(href, title, text) {\n        const filename = decodeURIComponent(href);\n        if (!/^[a-z]+:\\/\\//.test(filename)) {\n            try {\n                const data = fs.readFileSync(filename).toString('base64');\n                return `<img alt=\"${text}\" src=\"data:image/png;base64,${data}\">`;\n            } catch (err) {\n                // noop\n            }\n        }\n        return super.image(href, title, text);\n    }\n}\n\nfunction parseString(input, embedded) {\n    return marked(input, {\n        renderer: embedded ? new Renderer() : null,\n        highlight: (code, lang) => {\n            return hljs.highlightAuto(code, [lang]).value;\n        },\n    });\n};\n\nexport function readMarkdownFile(filename, embedded) {\n    return new Promise((resolve) => {\n        fs.readFile(filename, (err, data) => {\n            if (err) {\n                throw err;\n            }\n            const html = parseString(data.toString(), embedded);\n            resolve(html);\n        });\n    });\n}\n"],"file":"markdown.js"}