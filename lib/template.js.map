{"version":3,"sources":["../src/template.js"],"names":["fs","require","path","ejs","resolve","name","content","readFileSync","__dirname","toString","compile","assets","files","css","js","data","key","Object","keys","bufs","fn","push","Buffer","from","concat","_indexTemplate","indexTemplate","template","_downloadTemplate","downloadTemplate","title","body","assign"],"mappings":";;;;;;;;AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AAEA,SAASG,OAAT,CAAiBC,IAAjB,EAAuB;AACnB,QAAMC,OAAO,GAAGN,EAAE,CAACO,YAAH,CAAgBL,IAAI,CAACE,OAAL,CAAaI,SAAb,EAAwB,IAAxB,EAA8BH,IAA9B,CAAhB,EAAqDI,QAArD,EAAhB;AACA,SAAON,GAAG,CAACO,OAAJ,CAAYJ,OAAZ,CAAP;AACH;;AAED,SAASK,MAAT,GAAkB;AAEd,QAAMC,KAAK,GAAG;AACVC,IAAAA,GAAG,EAAE,CACD,sDADC,EAED,kDAFC,EAGD,cAHC,CADK;AAMVC,IAAAA,EAAE,EAAE,CACA,sDADA,EAEA,aAFA;AANM,GAAd;AAYA,QAAMC,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIC,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYN,KAAZ,CAAhB,EAAoC;AAChC,UAAMO,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,EAAT,IAAeR,KAAK,CAACI,GAAD,CAApB,EAA2B;AACvBG,MAAAA,IAAI,CAACE,IAAL,CAAUrB,EAAE,CAACO,YAAH,CAAgBL,IAAI,CAACE,OAAL,CAAaI,SAAb,EAAwB,IAAxB,EAA8BY,EAA9B,CAAhB,CAAV;AACAD,MAAAA,IAAI,CAACE,IAAL,CAAUC,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAV;AACH;;AACDR,IAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYM,MAAM,CAACE,MAAP,CAAcL,IAAd,EAAoBV,QAApB,CAA6B,QAA7B,CAAZ;AACH;;AAED,SAAOM,IAAP;AACH;;AAED,IAAIU,cAAc,GAAG,IAArB;;AACO,SAASC,aAAT,GAAyB;AAC5B,MAAID,cAAc,IAAI,IAAtB,EAA4B;AACxB,UAAME,QAAQ,GAAGvB,OAAO,CAAC,gBAAD,CAAxB;AACA,UAAMW,IAAI,GAAGJ,MAAM,EAAnB;AACA,UAAML,OAAO,GAAGqB,QAAQ,CAACZ,IAAD,CAAxB;;AACAU,IAAAA,cAAc,GAAG,MAAMnB,OAAvB;AACH;;AACD,SAAOmB,cAAc,EAArB;AACH;;AAED,IAAIG,iBAAiB,GAAG,IAAxB;;AACO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,IAAjC,EAAuC;AAC1C,MAAIH,iBAAiB,IAAI,IAAzB,EAA+B;AAC3B,UAAMD,QAAQ,GAAGvB,OAAO,CAAC,mBAAD,CAAxB;AACA,UAAMW,IAAI,GAAGJ,MAAM,EAAnB;;AACAiB,IAAAA,iBAAiB,GAAG,CAACE,KAAD,EAAQC,IAAR,KAAiBJ,QAAQ,CAACV,MAAM,CAACe,MAAP,CAAc;AAACF,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAd,EAA6BhB,IAA7B,CAAD,CAA7C;AACH;;AACD,SAAOa,iBAAiB,CAACE,KAAD,EAAQC,IAAR,CAAxB;AACH","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst ejs = require('ejs');\n\nfunction resolve(name) {\n    const content = fs.readFileSync(path.resolve(__dirname, '..', name)).toString();\n    return ejs.compile(content)\n}\n\nfunction assets() {\n\n    const files = {\n        css: [\n            'node_modules/github-markdown-css/github-markdown.css',\n            'node_modules/highlight.js/styles/github-gist.css',\n            'web/main.css',\n        ],\n        js: [\n            'node_modules/socket.io-client/dist/socket.io.slim.js',\n            'web/main.js',\n        ],\n    };\n\n    const data = {};\n\n    for (let key of Object.keys(files)) {\n        const bufs = [];\n        for (let fn of files[key]) {\n            bufs.push(fs.readFileSync(path.resolve(__dirname, '..', fn)));\n            bufs.push(Buffer.from(\"\\n\"));\n        }\n        data[key] = Buffer.concat(bufs).toString('base64');\n    }\n\n    return data;\n}\n\nlet _indexTemplate = null;\nexport function indexTemplate() {\n    if (_indexTemplate == null) {\n        const template = resolve('web/index.html');\n        const data = assets();\n        const content = template(data);\n        _indexTemplate = () => content;\n    }\n    return _indexTemplate();\n}\n\nlet _downloadTemplate = null;\nexport function downloadTemplate(title, body) {\n    if (_downloadTemplate == null) {\n        const template = resolve('web/download.html')\n        const data = assets();\n        _downloadTemplate = (title, body) => template(Object.assign({title, body}, data));\n    }\n    return _downloadTemplate(title, body);\n}\n"],"file":"template.js"}