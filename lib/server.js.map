{"version":3,"sources":["../src/server.js"],"names":["port","filename","app","server","http","createServer","io","use","process","cwd","req","res","next","html","content","name","basename","path","parse","attachment","format","encodeURIComponent","ext","setHeader","end","sockets","on","socket","console","log","sys","client","conn","clientsCount","setTimeout","exit","emit","title","body","listen"],"mappings":"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","sourcesContent":["import sys from 'util';\nimport path from 'path';\nimport http from 'http';\nimport connect from 'connect';\nimport serveStatic from 'serve-static';\nimport socketIo from 'socket.io';\n\nimport { indexTemplate, downloadTemplate } from './template';\nimport { readMarkdownFile } from './markdown';\n\nexport default function(port, filename) {\n\n    const app = connect();\n    const server = http.createServer(app);\n    const io = socketIo(server);\n\n    app.use(serveStatic(process.cwd()));\n\n    app.use('/download', async (req, res, next) => {\n        const html = await readMarkdownFile(filename, true);\n        const content = downloadTemplate(filename, html);\n\n        const { name: basename } = path.parse(filename);\n        const attachment = path.format({ name: encodeURIComponent(basename), ext: '.html' });\n\n        res.setHeader('Content-disposition', `attachment; filename*=UTF-8''${attachment}`);\n        res.setHeader('Content-type', 'text/html');\n        res.end(content);\n    });\n\n    app.use('/', (req, res, next) => {\n        res.end(indexTemplate());\n    });\n\n    io.sockets.on('connection', (socket) => {\n        console.log(sys.format(\"connected (%s clients)\", socket.client.conn.server.clientsCount));\n\n        socket.on('disconnect', function() {\n            console.log(sys.format(\"disconnect (%s clients)\", socket.client.conn.server.clientsCount));\n\n            if (socket.client.conn.server.clientsCount === 0) {\n                setTimeout(() => {\n                    if (socket.client.conn.server.clientsCount === 0) {\n                        process.exit();\n                    }\n                }, 2000)\n            }\n        });\n\n        app.emit('markdown');\n    });\n\n    app.on('markdown', async () => {\n        const html = await readMarkdownFile(filename);\n        io.sockets.emit('markdown', {\n            title: filename,\n            body: html,\n        });\n    });\n\n    server.listen(port, () => {\n        console.log(`listening ... http://localhost:${port}`);\n    });\n\n    return app;\n}\n"],"file":"server.js"}